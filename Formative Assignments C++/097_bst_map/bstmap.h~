#include <stddef.h>

#include "map.h"

template<typename K, typename V>
class BstMap : public Map<K, V> {
  class Node {
   public:
    Node * left;
    Node * right;
    K key;
    V value;
    Node(const K & k, const V & v) : left(NULL), right(NULL), key(k), value(v) {}
    Node(Node * l, Node * r, const K & k, const V & v) :
        left(l),
        right(r),
        key(k),
        value(v) {}
  };
  Node * root;

 public:
  BstMap() : root(NULL) {}
  BstMap(BstMap & b) {
    //write copy constructor
  }
  BstMap operator=(BstMap & b) {
    //write operator =
  }
  virtual ~BstMap() {
    //write destructor
  }
  virtual void add(const K & key, const V & value) {
    if (root == NULL) {
      root = new Node(key, value);
    }
    else {
      if (key < root->key) {
        BstMap * leftBranch;
        leftBranch->root = root->left;
        leftBranch->add(key, value);
      }
      if (key > root->key) {
        BstMap * rightBranch;
        rightBranch->root = root->right;
        rightBranch->add(key, value);
      }
      else {
        root->value = value;
      }
    }
  }
  virtual void remove(const K & key) {}
};
